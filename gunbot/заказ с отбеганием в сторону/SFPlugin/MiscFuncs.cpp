#include "main.h"
#include <vector>

int BuildPacket[43] = { 215, 2, 0, 0, 0, 0, 0, 28, 0, 0, 0, 87, 101, 97, 112, 111, 110, 65, 115, 115, 101, 109, 98, 95, 79, 110, 74, 111, 105, 110, 67, 111, 109, 112, 111, 110, 101, 110, 116, 0, 0, 0, 0 };
int AltPacket[41] = { 215, 2, 0, 0, 0, 0, 0, 21, 0, 0, 0, 79, 110, 80, 108, 97, 121, 101, 114, 67, 108, 105, 101, 110, 116, 83, 105, 100, 101, 75, 101, 121, 2, 0, 0, 0, 100, 18, 0, 0, 0 };
int DialogResponse[51] = { 215, 2, 0,0,0,0,0,16,0,0,0,79,110,68,105,97,108,111,103,82,101,115,112,111,110,115,101,8,0,0,0,100,0,0,0,0,100,1,0,0,0,100,255,255,255,255,115,0,0,0,0 };

float paths[4][100][2] =
{
	{
		{-1602.7541503906, -629.28491210938}, {-1601.7860107422, -630.07666015625},
		{-1600.8184814453, -630.99731445313}, {-1600.3139648438, -631.54040527344},
		{-1599.3891601563, -632.56921386719}, {-1599.2004394531, -632.78009033203},
		{-1599.041015625, -632.96173095703}, {-1598.8540039063, -633.17724609375},
		{-1598.6989746094, -633.35620117188}, {-1598.515625, -633.56671142578},
		{-1598.3332519531, -633.77191162109}, {-1598.1496582031, -633.96563720703},
		{-1597.9576416016, -634.14477539063}, {-1597.7424316406, -634.31231689453},
		{-1597.4958496094, -634.48120117188}, {-1597.2486572266, -634.61822509766},
		{-1596.9948730469, -634.68383789063}, {-1596.6357421875, -634.24603271484}
	},
	{
		{-1602.7541503906, -629.28491210938}, {-1601.7860107422, -630.07666015625},
		{-1600.8184814453, -630.99731445313}, {-1600.3139648438, -631.54040527344},
		{-1599.3891601563, -632.56921386719}, {-1599.2004394531, -632.78009033203},
		{-1599.041015625, -632.96173095703}, {-1598.8540039063, -633.17724609375},
		{-1598.6989746094, -633.35620117188}, {-1598.515625, -633.56671142578},
		{-1598.3332519531, -633.77191162109}, {-1598.1496582031, -633.96563720703},
		{-1597.9576416016, -634.14477539063}, {-1597.7424316406, -634.31231689453},
		{-1597.4958496094, -634.48120117188}, {-1597.2486572266, -634.61822509766},
		{-1596.9948730469, -634.68383789063}, {-1597.1029052734, -635.779296875},
	},
	{
		{-1602.5394287109, -629.52447509766}, {-1601.9876708984, -630.06097412109},
		{-1601.8094482422, -630.27984619141}, {-1601.4454345703, -630.72686767578},
		{-1601.087890625, -631.06829833984}, {-1600.9603271484, -631.11297607422},
		{-1600.7601318359, -631.22814941406}, {-1600.5634765625, -631.42236328125},
		{-1600.3627929688, -631.62786865234}, {-1600.2111816406, -631.78546142578},
		{-1600.0361328125, -631.98217773438}, {-1599.8607177734, -632.19476318359},
		{-1599.7041015625, -632.41906738281}, {-1599.5780029297, -632.66326904297},
		{-1599.4820556641, -632.93048095703}, {-1599.4191894531, -633.19964599609},
		{-1599.3699951172, -633.47497558594}, {-1599.3425292969, -633.72393798828},
		{-1599.3416748047, -633.97369384766}, {-1599.3883056641, -634.25372314453},
		{-1599.4924316406, -634.50726318359}, {-1599.6336669922, -634.70776367188},
		{-1599.8106689453, -634.89013671875}, {-1600.0159912109, -635.06079101563},
		{-1600.2419433594, -635.22174072266}, {-1600.4816894531, -635.388671875},
		{-1600.7111816406, -635.54925537109}, {-1600.9305419922, -635.71148681641},
		{-1601.1534423828, -635.88128662109}, {-1601.3441162109, -635.9365234375},
		{-1601.5546875, -635.98010253906}, {-1601.7418212891, -636.19201660156},
		{-1601.8833007813, -636.41772460938}, {-1601.9826660156, -636.60559082031},
		{-1602.0963134766, -636.83618164063}, {-1602.2264404297, -637.10723876953},
		{-1602.3450927734, -637.35479736328}, {-1602.4691162109, -637.61370849609},
		{-1602.5867919922, -637.85913085938}, {-1602.7054443359, -638.11572265625},
		{-1602.802734375, -638.35345458984}, {-1602.8883056641, -638.57800292969},
		{-1602.9881591797, -638.82598876953}, {-1603.0618896484, -639.70684814453},
	},
	{
		{-1602.7895507813, -629.46667480469}, {-1601.9306640625, -630.14556884766},
		{-1601.7507324219, -630.27874755859}, {-1601.5438232422, -630.43194580078},
		{-1601.3189697266, -630.59851074219}, {-1601.1116943359, -630.751953125},
		{-1600.9127197266, -630.90002441406}, {-1600.6883544922, -631.08081054688},
		{-1600.4887695313, -631.26501464844}, {-1600.3248291016, -631.43682861328},
		{-1600.1423339844, -631.63629150391}, {-1599.9689941406, -631.84484863281},
		{-1599.8205566406, -632.08404541016}, {-1599.7055664063, -632.34973144531},
		{-1599.6198730469, -632.61627197266}, {-1599.5559082031, -632.88140869141},
		{-1599.5109863281, -633.14990234375}, {-1599.4892578125, -633.39862060547},
		{-1599.4992675781, -633.65264892578}, {-1599.5509033203, -633.93011474609},
		{-1599.642578125, -634.18231201172}, {-1599.7623291016, -634.4033203125},
		{-1599.9313964844, -634.62554931641}, {-1600.1286621094, -634.81652832031},
		{-1600.3336181641, -634.98016357422}, {-1600.5789794922, -635.14947509766},
		{-1600.8089599609, -635.28564453125}, {-1601.0471191406, -635.41198730469},
		{-1601.2930908203, -635.53125}, {-1601.5148925781, -635.62890625},
		{-1601.7448730469, -635.7548828125}, {-1601.9757080078, -635.89526367188},
		{-1602.2250976563, -635.98541259766}, {-1602.4362792969, -636.04766845703},
		{-1602.6966552734, -636.11743164063}, {-1602.9597167969, -636.17584228516},
		{-1603.2362060547, -636.22369384766}, {-1603.5153808594, -636.25842285156},
		{-1603.7921142578, -636.28302001953}, {-1604.0745849609, -636.29809570313},
		{-1604.3349609375, -636.29791259766}, {-1604.5780029297, -636.28240966797},
		{-1604.8623046875, -636.24566650391}, {-1605.1284179688, -636.19384765625},
		{-1605.3894042969, -636.12951660156}, {-1605.6405029297, -636.05975341797},
		{-1605.9083251953, -635.98004150391}, {-1606.1311035156, -635.90747070313},
		{-1606.4007568359, -635.80224609375}, {-1606.6530761719, -635.67230224609},
		{-1606.9061279297, -635.49169921875}, {-1607.0964355469, -635.38653564453},
		{-1607.2391357422, -635.32965087891}, {-1607.376953125, -635.17559814453},
		{-1607.4305419922, -635.06768798828}, {-1607.4111328125, -634.30053710938},
	}
};


float CalcDist2d(float x1, float y1, float x2, float y2)
{
	return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2) * 1.0);
}

void SendBuild()
{
	BitStream MyPacket;
	for (int i = 0; i < 45; i++) {
		MyPacket.Write((BYTE)BuildPacket[i]);
	}

	SF->getRakNet()->SendPacket(&MyPacket);
}


void SendDialog() {
	BitStream MyPacket;
	for (int i = 0; i < 51; i++) {
		MyPacket.Write((BYTE)DialogResponse[i]);
	}

	SF->getRakNet()->SendPacket(&MyPacket);
}


void SendAlt() {
	BitStream MyPacket;
	for (int i = 0; i < 41; i++) {
		MyPacket.Write((BYTE)AltPacket[i]);
	}

	SF->getRakNet()->SendPacket(&MyPacket);
}

bool isStolSvoboden(float X, float Y) {
	float Dist;
	float MinDist = 10000;

	float newX, newY;
	std::string labelString;
	for (int i = 0; i < SAMP_MAX_3DTEXTS; i++)
	{
		if (SF->getSAMP()->getNetGame()->pools->textLabelPool->iIsListed[i] != 1)
			continue;
		std::string strdialogText(SF->getSAMP()->getNetGame()->pools->textLabelPool->textLabel[i].text);
		if (strdialogText.find("Сборка оружия") != std::string::npos) {
			float labelposX = SF->getSAMP()->getNetGame()->pools->textLabelPool->textLabel[i].position[0];
			float labelposY = SF->getSAMP()->getNetGame()->pools->textLabelPool->textLabel[i].position[1];

			Dist = CalcDist2d(X, Y, labelposX, labelposY);

			if (Dist < MinDist) {
				newX = labelposX;
				newY = labelposY;
				MinDist = Dist;
				labelString = strdialogText;
			}
		}
	}
	return (labelString.find("Свободно") != std::string::npos);
}

bool findStanok(int* stanok) {

	float MinDist = 10000;
	float Dist;


	float cX = 0;
	float cY = 0;

	CVector* vect = PEDSELF->GetPosition();
	for (int i = 0; i < SAMP_MAX_3DTEXTS; i++) {
		if (SF->getSAMP()->getNetGame()->pools->textLabelPool->iIsListed[i] != 1)
			continue;
		std::string labelText(SF->getSAMP()->getNetGame()->pools->textLabelPool->textLabel[i].text);

		if (labelText.find("Сборка оружия") != std::string::npos && labelText.find("Свободно") != std::string::npos)
		{
			float labelX = SF->getSAMP()->getNetGame()->pools->textLabelPool->textLabel[i].position[0];
			float labelY = SF->getSAMP()->getNetGame()->pools->textLabelPool->textLabel[i].position[1];

			Dist = sqrt(pow(labelX - vect->fX, 2) + pow(labelY - vect->fY, 2) * 1.0);

			if (Dist < MinDist) {
				cX = labelX;
				cY = labelY;
				MinDist = Dist;
			}
		}

	}

	if (MinDist == 10000)
		return false;
	if (CalcDist2d(cX, cY, -1596.523193, -634.246032) < 1) {
		*stanok = 0;
	}
	else if (CalcDist2d(cX, cY, -1597.102905, -636.304321) < 1) {
		*stanok = 1;
	}
	else if (CalcDist2d(cX, cY, -1603.071655, -639.9539794) < 1) {
		*stanok = 2;
	}
	else if (CalcDist2d(cX, cY, -1607.3359, -634.2455444) < 1) {
		srand(time(NULL));
		int num = 0 + rand() % (2 - 0 + 1);
		*stanok = num;
	}
	return true;
}


VECTOR getNearestPathDot(int stanok, int* pathProg, int pathLen)
{
	VECTOR pathDot = { paths[stanok][0][0], paths[stanok][0][1], 0 };
	CVector* vect = PEDSELF->GetPosition();
	float MinDist = 10000;
	float Dist = CalcDist2d(vect->fX, vect->fY, paths[stanok][0][0], paths[stanok][0][1]);

	*pathProg = 0;

	for (int i = 1; i < pathLen; i++) {
		Dist = CalcDist2d(vect->fX, vect->fY, paths[stanok][i][0], paths[stanok][i][1]);
		if (Dist < MinDist) {
			MinDist = Dist;
			pathDot.X = paths[stanok][i][0];
			pathDot.Y = paths[stanok][i][1];
			*pathProg = i;
		}
	}
	return pathDot;
}


bool RunToPoint(int stanok, int pathprog, int PathLen) {
	CVector* vect = PEDSELF->GetPosition();
	float rX = paths[stanok][pathprog][0];
	float rY = paths[stanok][pathprog][1];

	float dist = sqrt((rX - vect->fX) * (rX - vect->fX) + (rY - vect->fY) * (rY - vect->fY));
	cameraset(rX, rY);
	SF->getGame()->emulateGTAKey(1, -128);
	if (pathprog < (3 * PathLen / 4) && pathprog >(PathLen / 4)) {
		SF->getGame()->emulateGTAKey(16, 255);
	}
	return dist < 0.7;
}


bool RunToCoord(float rX, float rY) {
	CVector* vect = PEDSELF->GetPosition();

	float dist = sqrt((rX - vect->fX) * (rX - vect->fX) + (rY - vect->fY) * (rY - vect->fY));
	cameraset(rX, rY);
	SF->getGame()->emulateGTAKey(1, -128);
	if (dist < 1.5 && dist > 0.8) {
		SF->getGame()->emulateGTAKey(16, 255);
	}
	else if (dist < 0.8) {
		SF->getGame()->emulateGTAKey(21, 255);
	}
	return dist < 0.7;
}

void cameraset(float X, float Y) {

	CVector mypos;
	CVector enpos;
	CVector vector;
	enpos.fX = X;
	enpos.fY = Y;

	CCamera* pCamera = GAME->GetCamera();
	mypos = *pCamera->GetCam(pCamera->GetActiveCam())->GetSource();
	vector = mypos - enpos;
	float AngleX = atan2f(vector.fY, -vector.fX) - M_PI / 2;

	*(float*)0xB6F258 = -(AngleX - M_PI / 2);
}